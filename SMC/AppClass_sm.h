//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_Start;
class MainMap_State_1;
class MainMap_State_2;
class MainMap_State_3;
class MainMap_State_4;
class MainMap_State_5;
class MainMap_Server_name;
class MainMap_Port_number;
class MainMap_Channel_name;
class MainMap_Password;
class MainMap_Error;
class MainMap_OK;
class MainMap_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void EOS(AppClassContext& context);
    virtual void digit(AppClassContext& context, char dig);
    virtual void dots(AppClassContext& context, char dot);
    virtual void letter(AppClassContext& context, char let);
    virtual void question(AppClassContext& context, char quest);
    virtual void restart(AppClassContext& context);
    virtual void slash(AppClassContext& context, char sl);
    virtual void unknown(AppClassContext& context, char unk);

protected:

    virtual void Default(AppClassContext& context);
};

class MainMap
{
public:

    static MainMap_Start Start;
    static MainMap_State_1 State_1;
    static MainMap_State_2 State_2;
    static MainMap_State_3 State_3;
    static MainMap_State_4 State_4;
    static MainMap_State_5 State_5;
    static MainMap_Server_name Server_name;
    static MainMap_Port_number Port_number;
    static MainMap_Channel_name Channel_name;
    static MainMap_Password Password;
    static MainMap_Error Error;
    static MainMap_OK OK;
};

class MainMap_Default :
    public AppClassState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void restart(AppClassContext& context);
    virtual void letter(AppClassContext& context, char let);
    virtual void digit(AppClassContext& context, char dig);
    virtual void slash(AppClassContext& context, char sl);
    virtual void dots(AppClassContext& context, char dot);
    virtual void question(AppClassContext& context, char quest);
    virtual void EOS(AppClassContext& context);
    virtual void unknown(AppClassContext& context, char unk);
};

class MainMap_Start :
    public MainMap_Default
{
public:
    MainMap_Start(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(AppClassContext& context, char let);
};

class MainMap_State_1 :
    public MainMap_Default
{
public:
    MainMap_State_1(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(AppClassContext& context, char let);
};

class MainMap_State_2 :
    public MainMap_Default
{
public:
    MainMap_State_2(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(AppClassContext& context, char let);
};

class MainMap_State_3 :
    public MainMap_Default
{
public:
    MainMap_State_3(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void dots(AppClassContext& context, char dot);
};

class MainMap_State_4 :
    public MainMap_Default
{
public:
    MainMap_State_4(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void slash(AppClassContext& context, char sl);
};

class MainMap_State_5 :
    public MainMap_Default
{
public:
    MainMap_State_5(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void slash(AppClassContext& context, char sl);
};

class MainMap_Server_name :
    public MainMap_Default
{
public:
    MainMap_Server_name(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void digit(AppClassContext& context, char dig);
    virtual void dots(AppClassContext& context, char dot);
    virtual void letter(AppClassContext& context, char let);
    virtual void question(AppClassContext& context, char quest);
    virtual void slash(AppClassContext& context, char sl);
};

class MainMap_Port_number :
    public MainMap_Default
{
public:
    MainMap_Port_number(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void digit(AppClassContext& context, char dig);
    virtual void question(AppClassContext& context, char quest);
    virtual void slash(AppClassContext& context, char sl);
};

class MainMap_Channel_name :
    public MainMap_Default
{
public:
    MainMap_Channel_name(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void digit(AppClassContext& context, char dig);
    virtual void letter(AppClassContext& context, char let);
    virtual void question(AppClassContext& context, char quest);
};

class MainMap_Password :
    public MainMap_Default
{
public:
    MainMap_Password(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void digit(AppClassContext& context, char dig);
    virtual void letter(AppClassContext& context, char let);
};

class MainMap_Error :
    public MainMap_Default
{
public:
    MainMap_Error(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class MainMap_OK :
    public MainMap_Default
{
public:
    MainMap_OK(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(MainMap::Start),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void EOS()
    {
        setTransition("EOS");
        getState().EOS(*this);
        setTransition(NULL);
    };

    inline void digit(char dig)
    {
        setTransition("digit");
        getState().digit(*this, dig);
        setTransition(NULL);
    };

    inline void dots(char dot)
    {
        setTransition("dots");
        getState().dots(*this, dot);
        setTransition(NULL);
    };

    inline void letter(char let)
    {
        setTransition("letter");
        getState().letter(*this, let);
        setTransition(NULL);
    };

    inline void question(char quest)
    {
        setTransition("question");
        getState().question(*this, quest);
        setTransition(NULL);
    };

    inline void restart()
    {
        setTransition("restart");
        getState().restart(*this);
        setTransition(NULL);
    };

    inline void slash(char sl)
    {
        setTransition("slash");
        getState().slash(*this, sl);
        setTransition(NULL);
    };

    inline void unknown(char unk)
    {
        setTransition("unknown");
        getState().unknown(*this, unk);
        setTransition(NULL);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
