//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#include "AppClass.h"
#include "AppClass_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_Start MainMap::Start("MainMap::Start", 0);
MainMap_State_1 MainMap::State_1("MainMap::State_1", 1);
MainMap_State_2 MainMap::State_2("MainMap::State_2", 2);
MainMap_State_3 MainMap::State_3("MainMap::State_3", 3);
MainMap_State_4 MainMap::State_4("MainMap::State_4", 4);
MainMap_State_5 MainMap::State_5("MainMap::State_5", 5);
MainMap_Server_name MainMap::Server_name("MainMap::Server_name", 6);
MainMap_Port_number MainMap::Port_number("MainMap::Port_number", 7);
MainMap_Channel_name MainMap::Channel_name("MainMap::Channel_name", 8);
MainMap_Password MainMap::Password("MainMap::Password", 9);
MainMap_Error MainMap::Error("MainMap::Error", 10);
MainMap_OK MainMap::OK("MainMap::OK", 11);

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::digit(AppClassContext& context, char dig)
{
    Default(context);
}

void AppClassState::dots(AppClassContext& context, char dot)
{
    Default(context);
}

void AppClassState::letter(AppClassContext& context, char let)
{
    Default(context);
}

void AppClassState::question(AppClassContext& context, char quest)
{
    Default(context);
}

void AppClassState::restart(AppClassContext& context)
{
    Default(context);
}

void AppClassState::slash(AppClassContext& context, char sl)
{
    Default(context);
}

void AppClassState::unknown(AppClassContext& context, char unk)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Default::restart(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::restart()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.ClearCash();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::restart()"
                << std::endl;
        }

        context.setState(MainMap::Start);
    }
    catch (...)
    {
        context.setState(MainMap::Start);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::letter(char let)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::digit(char dig)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::slash(AppClassContext& context, char sl)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::slash(char sl)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(sl);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::slash(char sl)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::dots(AppClassContext& context, char dot)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::dots(char dot)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dot);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::dots(char dot)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::question(char quest)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(quest);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::question(char quest)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::EOS(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::EOS()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : MainMap::Default::EOS()"
            << std::endl;
    }

    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::unknown(AppClassContext& context, char unk)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::unknown(char unk)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(unk);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::unknown(char unk)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Start::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Start"
                << std::endl;
    }

    if (let == 'i')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Start::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Start::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::State_1);
        }
        catch (...)
        {
            context.setState(MainMap::State_1);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_State_1::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::State_1"
                << std::endl;
    }

    if (let == 'r')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::State_1::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::State_1::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::State_2);
        }
        catch (...)
        {
            context.setState(MainMap::State_2);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_State_2::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::State_2"
                << std::endl;
    }

    if (let == 'c')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::State_2::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::State_2::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::State_3);
        }
        catch (...)
        {
            context.setState(MainMap::State_3);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_State_3::dots(AppClassContext& context, char dot)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::State_3"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::State_3::dots(char dot)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dot);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::State_3::dots(char dot)"
                << std::endl;
        }

        context.setState(MainMap::State_4);
    }
    catch (...)
    {
        context.setState(MainMap::State_4);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_State_4::slash(AppClassContext& context, char sl)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::State_4"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::State_4::slash(char sl)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(sl);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::State_4::slash(char sl)"
                << std::endl;
        }

        context.setState(MainMap::State_5);
    }
    catch (...)
    {
        context.setState(MainMap::State_5);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_State_5::slash(AppClassContext& context, char sl)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::State_5"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::State_5::slash(char sl)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(sl);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::State_5::slash(char sl)"
                << std::endl;
        }

        context.setState(MainMap::Server_name);
    }
    catch (...)
    {
        context.setState(MainMap::Server_name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Server_name::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Server_name::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.UpdateStatistic();
            ctxt.setAcceptable();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Server_name::EOS()"
                    << std::endl;
            }

            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_Server_name::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Server_name::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendServer(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Server_name::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Server_name::dots(AppClassContext& context, char dot)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Server_name::dots(char dot)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(dot);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Server_name::dots(char dot)"
                    << std::endl;
            }

            context.setState(MainMap::Port_number);
        }
        catch (...)
        {
            context.setState(MainMap::Port_number);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::dots(context, dot);
    }

}

void MainMap_Server_name::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Server_name::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendServer(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Server_name::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Server_name::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Server_name::question(char quest)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(quest);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Server_name::question(char quest)"
                    << std::endl;
            }

            context.setState(MainMap::Password);
        }
        catch (...)
        {
            context.setState(MainMap::Password);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::question(context, quest);
    }

}

void MainMap_Server_name::slash(AppClassContext& context, char sl)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Server_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Server_name::slash(char sl)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(sl);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Server_name::slash(char sl)"
                    << std::endl;
            }

            context.setState(MainMap::Channel_name);
        }
        catch (...)
        {
            context.setState(MainMap::Channel_name);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::slash(context, sl);
    }

}

void MainMap_Port_number::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Port_number"
                << std::endl;
    }

    if (ctxt.NotTooLong() && ctxt.checkPort())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Port_number::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.UpdateStatistic();
            ctxt.setAcceptable();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Port_number::EOS()"
                    << std::endl;
            }

            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_Port_number::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Port_number"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Port_number::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendPort(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Port_number::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Port_number::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Port_number"
                << std::endl;
    }

    if (ctxt.NotTooLong() && ctxt.checkPort())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Port_number::question(char quest)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(quest);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Port_number::question(char quest)"
                    << std::endl;
            }

            context.setState(MainMap::Password);
        }
        catch (...)
        {
            context.setState(MainMap::Password);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::question(context, quest);
    }

}

void MainMap_Port_number::slash(AppClassContext& context, char sl)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Port_number"
                << std::endl;
    }

    if (ctxt.NotTooLong() && ctxt.checkPort())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Port_number::slash(char sl)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(sl);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Port_number::slash(char sl)"
                    << std::endl;
            }

            context.setState(MainMap::Channel_name);
        }
        catch (...)
        {
            context.setState(MainMap::Channel_name);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::slash(context, sl);
    }

}

void MainMap_Channel_name::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Channel_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Channel_name::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.UpdateStatistic();
            ctxt.setAcceptable();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Channel_name::EOS()"
                    << std::endl;
            }

            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_Channel_name::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Channel_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Channel_name::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Channel_name::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Channel_name::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Channel_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Channel_name::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Channel_name::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Channel_name::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Channel_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Channel_name::question(char quest)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(quest);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Channel_name::question(char quest)"
                    << std::endl;
            }

            context.setState(MainMap::Password);
        }
        catch (...)
        {
            context.setState(MainMap::Password);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::question(context, quest);
    }

}

void MainMap_Password::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Password"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Password::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.UpdateStatistic();
            ctxt.setAcceptable();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Password::EOS()"
                    << std::endl;
            }

            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_Password::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Password"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Password::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Password::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Password::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Password"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Password::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Password::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
